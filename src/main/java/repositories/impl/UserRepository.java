package repositories.impl;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

import repositories.IUserRepository;
import unitofwork.IUnitOfWork;
import domain.User;
import domain.UserRoles;

public class UserRepository 
extends Repository<User> implements IUserRepository{
	
	protected PreparedStatement selectByRoleName;
	protected PreparedStatement selectByRoleId;
	
	protected String selectByRoleNameSql=
			"SELECT * FROM "
			+ "t_sys_users"
			+ " JOIN t_sys_roles ON"
			+"(t_sys_roles.userId=t_sys_users.id)"
			+ " WHERE name=?";
	
	protected String selectByRoleIdSql=
			"SELECT * FROM "
			+ "t_sys_users"
			+ " JOIN t_sys_roles ON"
			+"(t_sys_roles.roleId=t_sys_users.id)"
			+ " WHERE roleId=?";

	public UserRepository(Connection connection, IEntityRetriever<User> builder, IUnitOfWork uow) {
		super(connection,builder, uow);
		
		try {
			selectByRoleName=connection.prepareStatement(selectByRoleNameSql);
			selectByRoleId=connection.prepareStatement(selectByRoleIdSql);
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	@Override
	protected String getTableName() {
		return "t_sys_users";
	}

	@Override
	protected String getUpdateQuery() {
		return 
				"UPDATE t_sys_users SET (login,password)=(?,?) WHERE id=?";
	}

	@Override
	protected String getInsertQuery() {
		return "INSERT INTO t_sys_users(login,password)"
				+ "VALUES(?,?)";
	}


	@Override
	protected void setUpInsertQuery(User entity) throws SQLException {
		
		insert.setString(1, entity.getLogin());
		insert.setString(2, entity.getPassword());
		
	}

	@Override
	protected void setUpUpdateQuery(User entity) throws SQLException {
		update.setString(1, entity.getLogin());
		update.setString(2, entity.getPassword());
		update.setInt(3, entity.getId());
		
		
	}

	@Override
	public List<User> withRole(String roleName) {
		List<User> result = new ArrayList<User>();
		
		try {
			selectByRoleName.setString(1, roleName);
			ResultSet rs = selectByRoleName.executeQuery();
			while(rs.next())
			{
				result.add(retriever.build(rs));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return result;
	}

	@Override
	public List<User> withRole(int roleId) {
		
		List<User> result = new ArrayList<User>();
		
		try {
			selectByRoleId.setInt(1, roleId);
			ResultSet rs = selectByRoleId.executeQuery();
			while(rs.next())
			{
				result.add(retriever.build(rs));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return result;
	}

	@Override
	public List<User> withRole(UserRoles role) {
		
		List <User> result = new ArrayList<User>();
		for(User userRole : role.getUsers()){
			result.add(userRole);
		}
		return result;
	}

	@Override
	protected String getCreateTable() {
		
		return 
				"CREATE TABLE IF NOT EXISTS t_sys_users("
				+ "id int GENERATED BY DEFAULT AS IDENTITY(start with 1),"
				+ "login VARCHAR(20),"
				+ "password VARCHAR(20)"
				+ ")";
	}

}