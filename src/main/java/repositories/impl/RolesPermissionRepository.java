package repositories.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import repositories.IRolesPermissionRepository;
import unitofwork.IUnitOfWork;
import domain.RolesPermissions;
import domain.User;

public class RolesPermissionRepository extends Repository<RolesPermissions> 
implements IRolesPermissionRepository {
	
	protected PreparedStatement selectByRoleId;
	protected PreparedStatement selectByPermissionsId;
	
	protected String selectByRoleIdSql=
			"SELECT * FROM "
			+ "t_sys_permissions"
			+ " WHERE roleId=?";
	
	protected String selectByPermissionsIdSql=
			"SELECT * FROM "
			+ "t_sys_permissions"
			+ " WHERE permissionId=?";

	public RolesPermissionRepository(Connection connection,
			IEntityRetriever<RolesPermissions> retriever, IUnitOfWork uow) {
		super(connection, retriever, uow);
		
		try {
			selectByRoleId=connection.prepareStatement(selectByRoleIdSql);
			selectByPermissionsId=connection.prepareStatement(selectByPermissionsIdSql);
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	@Override
	public List<RolesPermissions> withRoleId(int roleId) {

		List<RolesPermissions> result = new ArrayList<RolesPermissions>();
		
		try {
			selectByRoleId.setInt(1, roleId);
			ResultSet rs = selectByRoleId.executeQuery();
			while(rs.next())
			{
				result.add(retriever.build(rs));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return result;
	}

	@Override
	public List<RolesPermissions> withPermissionId(int permissionId) {

		List<RolesPermissions> result = new ArrayList<RolesPermissions>();
		
		try {
			selectByPermissionsId.setInt(1, permissionId);
			ResultSet rs = selectByPermissionsId.executeQuery();
			while(rs.next())
			{
				result.add(retriever.build(rs));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return result;
	}

	@Override
	protected void setUpUpdateQuery(RolesPermissions entity)
			throws SQLException {
		
		insert.setString(1, entity.getName());
		insert.setInt(2, entity.getRoleId());
		insert.setInt(3, entity.getPermissionId());
		insert.setInt(4, entity.getId());

	}

	@Override
	protected void setUpInsertQuery(RolesPermissions entity)
			throws SQLException {
		
		insert.setString(1, entity.getName());
		insert.setInt(2, entity.getRoleId());
		insert.setInt(3, entity.getPermissionId());
		
	}

	@Override
	protected String getCreateTable() {
		
		return 
				"CREATE TABLE IF NOT EXISTS t_sys_permissions("
				+ "id int GENERATED BY DEFAULT AS IDENTITY(start with 1),"
				+ "name VARCHAR(20),"
				+ "roleId bigint,"
				+ "permissionId bigint"
				+ ")";
	}

	@Override
	protected String getTableName() {
		
		return "t_sys_permissions";
	}

	@Override
	protected String getUpdateQuery() {
		
		return
				"UPDATE t_sys_permissions SET (name,roleId,permissionId)=(?,?,?) WHERE id=?";
	}

	@Override
	protected String getInsertQuery() {
		
		return
				"INSERT INTO t_sys_permissions(name,roleId,permissionId)"
				+ "VALUES(?,?,?)";
	}

}